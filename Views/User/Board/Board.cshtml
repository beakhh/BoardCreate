@{
    ViewData["Title"] = "Board";
}
@model BoardCreate.Models.ViewModels.BoardViewModel
@inject IHttpContextAccessor HttpContextAccessor
<style>
    .container2 {
        display: flex;
        width: 1200px;
        height: 900px;
    }

    .left_container {
        width: 80%;
        height: 900px;
    }

    .right_container {
        width: 20%;
        height: 900px;
        margin: 0 0 0 26px;
    }

    .Home_Login {
        width: 130px;
        height: 30px
    }

    #top {
        display: flex;
        align-items: center; /* 세로 정렬 */
        height: 40px;
        width: 100%;
        padding-left: 15px;
        margin: 0 0 8px 0;
    }

    #plus_button {
        margin-left: auto; /* 오른쪽 끝으로 밀어내기 */
    }

    #boarListStyle{
        border: none;
        border-bottom: 0.1px solid #dee2e6;
        width: 100%;
        margin-left: 0px;
        margin: 0 0 1px 0;
        height: 36px;
        padding: 4px;
        display: flex;
        align-items: center;
        align-content: center;
    }
    }

    .custom-link {
        text-decoration: none;
        color: black;
        display: block;
        width: 100%;
        padding: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .highlighted {
        background-color: rgba(128, 128, 128, 0.09);
    }

    .custom-link:hover {
        background-color: rgba(128, 128, 128, 0.2) !important;
    }

    .tabsName{
        border: 3px solid #c680d98a;
        border-radius: 15px;
        min-width: 5%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 3px;
        margin: 0 9px 0 0;
    }

    #paginationDad{
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 15px 0 0 0;
    }
    .tabsName:hover {
        background-color: #c680d98a;
    }

    select {
        -webkit-appearance: none;
        border: 1px solid #bc48ff;
        border-radius: 8px;
        font-size: 11px;
        cursor: pointer;
        outline: none;
        transition: all 0.3s ease;
        text-align: center;
    }
        select:hover {
            border-color: #0056b3;
            background-color: #e9ecef;
        }

        select:focus {
            border-color: #0056b3;
            box-shadow: 0 0 5px rgba(0, 91, 187, 0.5);
        }

        select:disabled {
            background-color: #ddd;
            cursor: not-allowed;
        }


</style>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>

    <div id="top">
        @*탭 상태가 1들이라 안 나옴*@
        @foreach (var item in Model.BoardTabs)
        {
            <div class="tabsName"
                 style="@(item.TabName == Model.BoardSundry.SelectedTab ? "background-color: #c680d98a;" : "")"
                 data-tabname="@item.TabName"
                 onclick="changeViewByTab(this.dataset.tabname)">
                @item.TabName
            </div>
        }
    </div>
    <div class="container2">
        <div class="left_container">
            <div class="table">
                <div class="row" id="boarListStyle">
                    <div class="col-1">
                        번호
                    </div>                    
                    <div class="col-6">
                        제목
                    </div>
                    <div class="col-1">
                        작성자
                    </div>
                    <div class="col-2">
                        작성일
                    </div>
                    <div class="col-1">
                        조회수
                    </div>
                    <div class="col-1">
                        추천
                    </div>
                </div>
                @*여기는 공지글*@ 

                @foreach (var item in Model.BoardLists)
                {

                    <div class="@($"custom-link row {(item.UserExists == 1 ? "highlighted" : "")}")"
                         id="boarListStyle"
                         onclick="postData(@item.IDX, @item.SectionIDX, @item.ViewCount)">

                        <div class="col-1" style="display:flex; ">
                            <div style="width: 50%;">
                                @item.AdjustedIDX
                            </div>
                            <div>
                                @if (item.BoardPrivate == 3)
                                {
                                    <img src="/images/star.png" style="width: 14px; height: auto; margin-bottom: 2px;" />
                                }
                            </div>
                        </div>
                        <div class="col-6">
                            @item.Title
                        </div>
                        <div class="col-1">
                            @item.NickName
                        </div>
                        <div class="col-2 time-text" data-time="@item.BoardCreatedAt">
                        </div>
                        <div class="col-1">
                            @item.ViewCount
                        </div>
                        <div class="col-1">
                            @item.BoardLikeCount
                        </div>
                    </div>
                }

                <div id="paginationDad">
                    <ul class="pagination pagination-sm">
                        <li class="page-item">
                            <div class="page-link" aria-label="Previous" onclick="clickedValue('minus')">
                                <span aria-hidden="true">&laquo;</span>
                            </div>
                        </li>
                        <li class="page-item" id="page_linke_A" onclick="clickedValue('page_A')"><a class="page-link" id="page_A"></a></li>
                        <li class="page-item" id="page_linke_B" onclick="clickedValue('page_B')"><a class="page-link" id="page_B"></a></li>
                        <li class="page-item" id="page_linke_C" onclick="clickedValue('page_C')"><a class="page-link" id="page_C"></a></li>
                        <li class="page-item" id="page_linke_D" onclick="clickedValue('page_D')"><a class="page-link" id="page_D"></a></li>
                        <li class="page-item" id="page_linke_E" onclick="clickedValue('page_E')"><a class="page-link" id="page_E"></a></li>
                        <li class="page-item">
                            <div class="page-link" aria-label="Next" onclick="clickedValue('plus')">
                                <span aria-hidden="true">&raquo;</span>
                            </div>
                        </li>
                    </ul>
                    <div>
                        @{
                            var pageSizes = new List<int> { 5, 10, 20 };
                        }
                        <select id="pageSizeSelect" style="margin: -8px 0 11px 5px; height: 34px;" onchange="changePageSize()">
                            @foreach (var size in pageSizes)
                            {
                                <option value="@size" selected="@(Model.BoardSundry.PageSize == size ? "selected" : null)">@size</option>
                            }
                        </select>
                    </div>
                </div>

                <form id="hiddenForm" method="get" action="/User/BoardDetail" style="display:none;" >
                    <input type="hidden" name="BoardIDX" id="hiddenBoardIDX" />
                    <input type="hidden" name="SectionIDX" id="hiddenSectionIDX" />
                    <input type="hidden" name="ViewCount" id="hiddenViewCount" />
                </form>
            </div>
        </div>
        <div class="right_container">
            <div>
                @*@if (@HttpContextAccessor.HttpContext.Session.GetString("NickName") == null)*@
                @if (Model.UserID == "Guest")
                {
                    <form action="/User/Login" method="post" class="p-4 border rounded shadow-sm">
                        <div class="mb-2 d-flex align-items-center ">
                            <input type="text" id="UserId" name="UserId" class="form-control Home_Login me-2" style="font-size: 13px;" placeholder="아이디" required>
                            <input type="checkbox" name="idSave" checked /><span style="font-size:10px; text-align:center; margin-left:3px;">아이디<br>저장</span>
                        </div>
                        <div class="mb-2 d-flex ">
                            <input type="password" id="UserPW" name="UserPW" placeholder="비밀번호" style="font-size: 13px;" class="form-control Home_Login me-2" required>
                            <button type="submit" class="btn btn-outline-primary btn-sm" style="font-size: 13px;">Login</button>
                        </div>
                        <div class="text-center">
                            <a asp-controller="User" asp-action="Register" style="font-size:10px;">회원가입</a>
                            <a href="/User/Register" style="font-size:10px;">아이디/비밀번호 찾기</a>
                        </div>
                    </form>
                }
                else
                {
                    <div id="rigth_1">
                        <div style="width: 50%;">
                        </div>
                        <div style="width: 50%;">
                        </div>
                    </div>
                    <div id="rigth_1">
                        <div style="width: 100%;">
                            <a asp-controller="User" asp-action="Logout" style="font-size:10px;">로그아웃하기</a>
                        </div>
                    </div>
                    <a asp-controller="User" asp-action="BoardInsert" asp-route-SectionIDX="@Model.BoardSundry.SectionIDX">
                        글쓰기 @Model.BoardSundry.SectionIDX
                    </a>
                }
            </div>

            <div id="recentBox1">
                <div class="recentBox">
                    <div id="recontBoxTitle">
                        최신글
                    </div>
                    <div id="recentListBox_Every">
                    </div>
                </div>

                <div class="recentBox">
                    <div id="recontBoxTitle">
                        내가 본 최신글
                    </div>
                    <div id="recentListBox_My">
                    </div>
                </div>

            </div>
        </div>
    </div>

    <script>
        updateUserRecentViewLists();

        function formatTimeDifference(pastTime) {
            const now = new Date();
            let formattedPastTime = pastTime.replace("오전 ", "").replace("오후 ", "");

            const past = new Date(formattedPastTime);

            const diffInMinutes = Math.floor((now - past) / (1000 * 60)); 

            if (diffInMinutes < 1) return "방금 전";
            if (diffInMinutes < 3) return "3분 전";
            if (diffInMinutes < 10) return "10분 전";
            if (diffInMinutes < 30) return "30분 전";
            if (diffInMinutes < 60) return "1시간 전";

            const diffInHours = Math.floor(diffInMinutes / 60);
            if (diffInHours < 3) return "3시간 전";
            if (diffInHours < 10) return "10시간 전";
            if (diffInHours < 22) return "22시간 전";
            if (diffInHours < 24) return "1일 전";

            return past.toISOString().split("T")[0];
        }
        function updateAllTimeElements() {
            const timeElements = document.querySelectorAll(".time-text"); 
            timeElements.forEach(element => {
                const pastTime = element.getAttribute("data-time");
                const newText = formatTimeDifference(pastTime);

                if (element.innerText !== newText) {
                    element.innerText = newText;
                }
            });
        }
        setInterval(updateAllTimeElements, 60000);
        updateAllTimeElements();


        function clickedValue(clickedType) {
            let currentPage = "@Model.BoardSundry.CurrentPage";
            
            if (clickedType == "minus" || clickedType == "plus") {
                let PageTotalCount = "@Model.BoardSundry.PageTotalCount";

                if (clickedType == "minus") {
                    if (Number(currentPage) - 2 <= 1 ) currentPage = 1;
                    else Number(currentPage) - 2;
                }
                else{
                    if (Number(currentPage) + 2 >= PageTotalCount) currentPage = PageTotalCount;
                    else Number(currentPage) + 2;
                }
            }
            else{
                currentPage = document.getElementById(clickedType).textContent;
            }
            changeViewByPage(currentPage);
        }

        function changeViewByPage(currentPage) {
            let SectionIDX = "@Model.BoardSundry.SectionIDX";
            let SelectedTab = "@Model.BoardSundry.SelectedTab";
            let encodedTab = encodeURIComponent(SelectedTab);
            let pageSize = document.getElementById("pageSizeSelect").value;

            const requestModel = {
                SectionIDX: SectionIDX,
                SelectedTab: encodedTab,
                PageSize: pageSize,
                CurrentPage: currentPage
            };
            const queryString = new URLSearchParams(requestModel).toString();
            window.location.href = `Board?${queryString}`;

        }
        function changePageSize() {
            let SelectedTab = "@Model.BoardSundry.SelectedTab";

            let SectionIDX = "@Model.BoardSundry.SectionIDX";
            let encodedTab = encodeURIComponent(SelectedTab);
            let pageSize = document.getElementById("pageSizeSelect").value;
            let currentPage = "@Model.BoardSundry.CurrentPage";

            window.location.href = `Board?SectionIDX=${SectionIDX}&SelectedTab=${encodedTab}&PageSize=${pageSize}&CurrentPage=${currentPage}`;
        }

        window.onload = function () {
            let currentPage = "@Model.BoardSundry.CurrentPage";
            let PageTotalCount = "@Model.BoardSundry.PageTotalCount";
            DynamicPaging(currentPage, PageTotalCount); // 현재 페이지: 1, 총 페이지: 5
        };
        
        function DynamicPaging(CurrentPage, PageTotalCount) {
            let pages = [0, 0, 0, 0, 0];

            if (Number(PageTotalCount) - 5 <= 0) {
                for (let i = 0; i < Number(PageTotalCount); i++) {
                    pages[i] = i + 1;
                }
            }
            else if (Number(CurrentPage) - 1 == 0) {
                pages[0] = Number(CurrentPage);
                for (let i = 1; i < 5; i++) {
                    pages[i] = i + 1;
                }
            } 
            else if (Number(CurrentPage) - 2 == 0) {
                pages[0] = Number(CurrentPage) - 1;
                pages[1] = Number(CurrentPage);
                for (let i = 2; i < 5; i++) {
                    pages[i] = i + 1;
                }
            } 
            else if (Number(CurrentPage) + 1 == PageTotalCount) {
                pages = [
                    Number(CurrentPage) - 3,
                    Number(CurrentPage) - 2,
                    Number(CurrentPage) - 1,
                    Number(CurrentPage),
                    Number(CurrentPage) + 1
                ];
            } 
            else if (Number(CurrentPage) == PageTotalCount) {
                pages = [
                    Number(CurrentPage) - 4,
                    Number(CurrentPage) - 3,
                    Number(CurrentPage) - 2,
                    Number(CurrentPage) - 1,
                    Number(CurrentPage)
                ];
            } 
            else {
                pages = [
                    Number(CurrentPage) - 2,
                    Number(CurrentPage) - 1,
                    Number(CurrentPage),
                    Number(CurrentPage) + 1,
                    Number(CurrentPage) + 2
                ];
            }
            const pageIds = ["page_A", "page_B", "page_C", "page_D", "page_E"];
            const pagelinkeIds = ["page_linke_A", "page_linke_B", "page_linke_C", "page_linke_D", "page_linke_E"];
            for (let i = 0; i < 5; i++) {
                if (pages[i] != 0) {
                    document.getElementById(pageIds[i]).textContent = pages[i];
                    if (pages[i] === Number(CurrentPage)) {
                        document.getElementById(pageIds[i]).style.backgroundColor = "#c680d98a";
                    }
                }
                else {
                    document.getElementById(pagelinkeIds[i]).style.display = "none";
                }



            }
        }


        function changeViewByTab(tab) {
            let pageSize = document.getElementById("pageSizeSelect").value;
            let currentPage = "@Model.BoardSundry.CurrentPage";
            let SectionIDX = "@Model.BoardSundry.SectionIDX";

            window.location.href = `Board?SectionIDX=${SectionIDX}&SelectedTab=${tab}&PageSize=${pageSize}&CurrentPage=${currentPage}`;
        }

        function postData(boardIDX, sectionIDX, viewCount) {
            // Hidden Input 필드에 데이터 설정
            document.getElementById("hiddenBoardIDX").value = boardIDX;
            document.getElementById("hiddenSectionIDX").value = sectionIDX;
            document.getElementById("hiddenViewCount").value = viewCount;

            document.getElementById("hiddenForm").submit();
        }

    </script>
    @using Newtonsoft.Json

    @if (TempData["GetboardDetailModelFalseAlertMessage"] != null)
    {
        <script>
            alert(@Html.Raw(JsonConvert.SerializeObject(TempData["GetboardDetailModelFalseAlertMessage"])));
        </script>
    }
</body>