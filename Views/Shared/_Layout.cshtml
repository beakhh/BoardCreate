<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BoardCreate</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/BoardCreate.styles.css" asp-append-version="true" />
</head>
@inject IHttpContextAccessor HttpContextAccessor
<style>
    .container_body {
        min-height: 1079px;
        max-height: 100%;
        margin: 0;
        display: flex;
        justify-content: center;
    }
    .fixed-footer {
        position: fixed; /* 고정 위치 지정 */
        width: 100%; /* 화면 너비 전체를 차지 */
        background-color: #f8f9fa; /* 배경색 지정 */
        padding: 10px 0; /* 위아래 여백 */
        z-index: 1000; /* 다른 요소 위로 오도록 설정 */
    }

    #recentBox1 {
        width: 100%;
        height: 500px;
        margin: 14px 0 0 0;
        border: 0.1px solid #ced4da;
        border-radius: 28px;
    }

    .recentBox {
        width: 100%;
        height: 49%;
        border: 0.1px solid #ced4da;
        padding: 10px;
        margin: 1% 0 1% 0;
    }

    #recontBoxTitle {
        font-size: 13px;
        margin: 0 0 7px 0;
    }

    .recentList {
        width: 100%;
        height: 21px;
        font-size: 12px;
        display: flex;
        align-items: center;
        justify-content: flex-start;
    }

    .recentList {
        transition: background-color 0.3s ease;
    }

        .recentList:hover {
            background-color: rgba(128, 128, 128, 0.15) !important;
        }
</style>
<script>
    function updateUserRecentViewLists() {
        $.ajax({
            url: "/User/UpdateUserRecentViewLists",
            type: 'POST',
            data: {
            },
            dataType: 'json',
            success: function (response) {
                let recentList_Every = [];
                let recentList_My = [];
                let recentListCase;
                switch (response.isAvailable) {
                    case 0:
                        recentListCase = 0;
                        break;
                    case 1:
                        recentList_Every = [...response.DataRecontListEvery];
                        recentListCase = 1;
                        break;
                    case 2:
                        recentList_My = [...response.DataRecontListMy];
                        recentListCase = 2;
                        break;
                    case 3:
                        recentList_Every = [...response.DataRecontListEvery];
                        recentList_My = [...response.DataRecontListMy];
                        recentListCase = 3;
                        break;
                }
                let recentList = { my: recentList_My, every: recentList_Every };
                let totalLength = recentList.my.length + recentList.every.length;

                if (totalLength > 0) {
                    recentListSet(recentList, recentListCase); // 최종적으로 한 번만 호출
                }
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
                alert('서버 오류가 발생했습니다.');
            }
        });
    }
    // 9개가 넘으면 스크롤
    function recentListSet(recentList, recentListCase) {
        if (recentListCase == 1) {
            let recentBox_Name = "recentListBox_Every"
            recentListEveryDynamite(recentBox_Name, recentList.every)
        }
        else if (recentListCase == 2) {
            let recentBox_Name = "recentListBox_My"
            recentListEveryDynamite(recentBox_Name, recentList.my)
        }
        else if (recentListCase == 3) {
            let recentBox_Name = "recentListBox_Every"
            recentListEveryDynamite(recentBox_Name, recentList.every)

            recentBox_Name = "recentListBox_My"
            recentListEveryDynamite(recentBox_Name, recentList.my)
        }
    }

    function recentListEveryDynamite(recentBox_Name, recentListData) {
        let recentBox1 = document.getElementById(recentBox_Name)

        for (let i = 0; i < recentListData.length; i++) {

            let imgDiv = "";
            if (recentListData[i].BoardPrivate == 3) {
                let imgDivElement = document.createElement("div");
                let img = document.createElement("img");
                img.src = "/images/star.png";
                img.style.width = "14px";
                img.style.height = "auto";
                img.style.marginBottom = "2px";

                imgDivElement.appendChild(img);
                imgDiv = imgDivElement.outerHTML;
            }

            const newRecentDiv = document.createElement('div');
            newRecentDiv.id = `${recentBox_Name}_${[i]}`;
            newRecentDiv.className = `recentList`;
            newRecentDiv.onclick = function () {
                recentBoardDetailGo(`${recentBox_Name}_${[i]}`);
            };
            newRecentDiv.innerHTML = `
                ${imgDiv}
                <div >
                    ${recentListData[i].Title}
                </div>
                <input type="hidden" id="${recentBox_Name}_${[i]}_IDX" value="${recentListData[i].IDX}"/>
                <input type="hidden" id="${recentBox_Name}_${[i]}_SectionIDX" value="${recentListData[i].SectionIDX}"/>
                <input type="hidden" id="${recentBox_Name}_${[i]}_UserID" value="${recentListData[i].UserID}"/>
                <input type="hidden" id="${recentBox_Name}_${[i]}_BoardPrivate" value="${recentListData[i].BoardPrivate}"/>
                <input type="hidden" id="${recentBox_Name}_${[i]}_ViewCount" value="${recentListData[i].ViewCount}"/>
            `;
            recentBox1.appendChild(newRecentDiv);
        }
    }

    function recentBoardDetailGo(recentBox_Name) {
        let BoardIDX = document.getElementById(`${recentBox_Name}_IDX`).value;
        let SectionIDX = document.getElementById(`${recentBox_Name}_SectionIDX`).value;
        let ViewCount = document.getElementById(`${recentBox_Name}_ViewCount`).value;

        window.location.href = `/User/BoardDetail?BoardIDX=${BoardIDX}&SectionIDX=${SectionIDX}&ViewCount=${ViewCount}`;
    }

</script>
<body>
    @*여기에 조건으로 특정 세션 (관리자 페이지 접속 성공시 발급) 될때는 사용 불가*@
    @if (@HttpContextAccessor.HttpContext.Session.GetString("manager") == null)
    {
        @Html.Partial("Serch")
    }

    <div class="container_body">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    @if (@HttpContextAccessor.HttpContext.Session.GetString("manager") == null)
    {
    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - BoardCreate - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    }

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @Html.Partial("_Notification")
    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>
